---
layout: post
title:  "二叉树 #Leetcode"
date:   2018-08-14 01:35:59 +0800
categories: CLRS
---
##### **1. 反转二叉树**
```java
    public TreeNode invertTree(TreeNode root) {
            if(root == null){
                return null;
            }
            root.left = invertTree(root.left);
            root.right = invertTree(root.right);
            return swapChild(root);
    }
    public TreeNode swapChild(TreeNode root){
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        return root;
    }
```
##### **2. 合并二叉树**
1) raw 版
```java
  public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {

      if(t1 != null && t2 == null){
          return t1;
      }else if(t1 == null && t2 != null){
          return t2;
      }else if(t1 == null && t2 == null){
          return null;
      }

      return combination(mergeTwoNode(t1, t2), mergeTrees(t1.left, t2.left), mergeTrees(t1.right, t2.right));

  }

  public TreeNode combination(TreeNode root, TreeNode left, TreeNode right){
      if(root == null){
          return root;
      }
      root.left = left;
      root.right = right;
      return root;
  }

  public TreeNode mergeTwoNode(TreeNode t1, TreeNode t2){

      if(t1 != null && t2 == null){
          return t1;
      }else if(t1 == null && t2 != null){
          return t2;
      }else if(t1 == null && t2 == null){
          return null;
      }
      return new TreeNode(t1.val + t2.val);
  }
```
2) light 版
```java
  public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
          if(t1==null) return t2;
          if(t2==null) return t1;
          t1.val += t2.val;
          t1.left = mergeTrees(t1.left,t2.left);
          t1.right = mergeTrees(t1.right,t2.right);
          return t1;
      }
```
##### **3. 最大高度**
```java
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        return max(maxDepth(root.left)+1, maxDepth(root.right)+1);
    }
    public int max(int a, int b){
        if(a >= b){
            return a;
        }else{
            return b;
        }
    }
```

##### **3. 层序遍历二叉树求每层均值**
```java
    public List<Double> averageOfLevels(TreeNode root) {
        //初始化
        List<Double> res = new LinkedList<Double>();
        List<TreeNode> layer = new LinkedList<TreeNode>();
        layer.add(root);

        //循环遍历
        while(!nextLayer(layer).isEmpty()){
            res.add(averageOfLayer(layer));// 计算本层结点平均值并记录
            layer = nextLayer(layer);//下一层
        }
        return res;
    }

    public List<TreeNode> nextLayer(List<TreeNode> currentLayer){        
        List<TreeNode> nextLayerNodes = new LinkedList<TreeNode>();
        for(TreeNode node : currentLayer){
            if(node != null){
                nextLayerNodes.add(node.left);
                nextLayerNodes.add(node.right);
            }
        }
        return nextLayerNodes;
    }
    public Double averageOfLayer(List<TreeNode> layer){
        double sum = 0.0;
              int count = 0;
        for(TreeNode node : layer){
            if(node != null){
                sum += node.val;
                count += 1;
              }
            }
        return sum/count;
    }
```
##### **4. 二叉树的所有路径**

```java
    public List<String> binaryTreePaths(TreeNode root) {

        List<String> res = new LinkedList<String>();
        if(root == null){
            return res;
        }
        tracePath(root,String.valueOf(root.val),res);
        return res;
    }
    public void tracePath(TreeNode root, String path ,List<String> res){
        if(root.left == null && root.right == null){
            res.add(path);
        }
        if(root.left != null){
            tracePath(root.left, path+"->"+String.valueOf(root.left.val), res);
        }
        if(root.right != null){
            tracePath(root.right, path+"->"+String.valueOf(root.right.val), res);
        }
    }
```
##### **5. 判断两个二叉树的相似性**
```java
  public boolean leafSimilar(TreeNode root1, TreeNode root2) {
      return isSimilar(leafsOfTree(root1), leafsOfTree(root2));
  }
  public List<TreeNode> leafsOfTree(TreeNode root){
      List<TreeNode> leafs = new LinkedList<TreeNode>();
      travelTree(root, leafs);
      return leafs;
  }
  public void travelTree(TreeNode root, List<TreeNode> leafs){
      if(root.left == null && root.right == null){ //bugfix root.right !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
          leafs.add(root);
      }
      if(root.left != null){
          travelTree(root.left, leafs);
      }
      if(root.right != null){
          travelTree(root.right, leafs);
      }

  }

  public Boolean isSimilar(List<TreeNode>list1, List<TreeNode>list2){

      if(list1.size() != list2.size()){
          return false;
      }
      for (int i = 0; i < list1.size(); i++) {
          TreeNode leaf1 = list1.get(i);
          TreeNode leaf2 = list2.get(i);
          if(leaf1.val != leaf2.val){
              return false;
          }
      }
      return true;
  }
```
##### **6. 最近公共祖先（二叉搜索树）**
1) raw 版
```java
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        List<TreeNode> path1 = findPathTo(root, p);
        List<TreeNode> path2 = findPathTo(root, q);

        TreeNode minCommonNode = new TreeNode(-1);
        for (int i = 0; i < path1.size() && i < path2.size(); i++) {
            TreeNode node1 = path1.get(i);
            TreeNode node2 = path2.get(i);
            if(node1.val == node2.val){
                minCommonNode.left = node1;
            }
        }        
        return minCommonNode.left;
    }
    public List<TreeNode> findPathTo(TreeNode root, TreeNode target){
        List<TreeNode> res = new LinkedList<TreeNode>();
        while(root != null){
            res.add(root);
            if(target.val < root.val){
                root = root.left;
            }
            if(target.val > root.val){
                root = root.right;
            }
            if(target.val == root.val){
                break;
            }
        }
        return res;
    }
```
2）light 版

原理：情况1:目标结点在当前根结点同一侧，下一层。情况二：不同侧，返回当前根结点
##### **7. 二叉树相等**
```java
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null){
            return true;
        }
        if(p != null && q != null){
            if(p.val != q.val){
                return false;
            }else{
                return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
            }
        }
        return false;
    }
```
##### **8. 修剪二叉树**
```java
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if(root == null){
            return null;
        }
        if(root.val < L){
            return trimBST(root.right, L, R);
        }
        if(root.val > R){
            return trimBST(root.left, L, R);
        }
        root.left = trimBST(root.left, L, R);
        root.right = trimBST(root.right, L, R);
        return root;
    }
```
##### **9. 路经总和 1**
```java
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null){
            return false;
        }
        return pathSum(root, root.val, sum);
    }
    public boolean pathSum(TreeNode root, int currentSum, int target){

        if(root.left == null && root.right == null){
            return currentSum == target;
        }
        if(root.left == null && root.right != null){
            return pathSum(root.right, currentSum+root.right.val, target);
        }
        if(root.left != null && root.right == null){
            return pathSum(root.left, currentSum+root.left.val, target);
        }

        return pathSum(root.right, currentSum+root.right.val, target) || pathSum(root.left, currentSum+root.left.val, target);

    }
```
##### **10.路径总和 2(failed)**
```java
    public int pathSum(TreeNode root, int sum) {
        if(root == null)
            return 0;
        return dfs(root, sum)+pathSum(root.left, sum)+pathSum(root.right, sum);
    }

    private int dfs(TreeNode root, int sum){
        int res = 0;
        if(root == null)
            return res;
        if(sum == root.val)
            res++;
        res+=dfs(root.left,sum - root.val);
        res+=dfs(root.right,sum - root.val);
        return res;
    }
```
##### **11.对称二叉树 (reluctant)**
```java
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        return isSymmetric(root.left, root.right);
    }
    public static boolean isSymmetric(TreeNode left, TreeNode right) {
        if(left == null && right == null) return true;
        if(left == null || right == null) return false;
        if(left.val == right.val) return isSymmetric(left.left, right.right)
            && isSymmetric(left.right, right.left);
        return false;
    }
```
##### **12.平衡二叉树**
```java
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        return isBalanced(root.left) && isBalanced(root.right) && heightOfTwoTreeXiaoYuYi(root.left, root.right);
    }
    public boolean heightOfTwoTreeXiaoYuYi(TreeNode left, TreeNode right){
        int padding = heightOfTree(left)-heightOfTree(right);
        if(padding < 0){padding = -padding;}
        return padding <= 1;
    }
    public int heightOfTree(TreeNode root){
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null){
            return 1;
        }
        return Math.max(1+heightOfTree(root.left), 1+heightOfTree(root.right));
    }
```
##### **13.搜索树查找**
```java
    public TreeNode searchBST(TreeNode root, int val) {
      if(root == null){
          return null;
      }
      if(root.val == val){
          return root;
      }
      if(root.val < val){
          return searchBST(root.right, val);
      }
      if(root.val > val){
          return searchBST(root.left, val);
      }
      return null;
    }
```
##### **14.最小深度**
```java
      public int minDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null){
            return 1;
        }
        if(root.left != null && root.right != null){
            return 1 + Math.min(minDepth(root.left), minDepth(root.right));
        }
        if(root.left != null){
            return 1 + minDepth(root.left);
        }
        if(root.right != null){
            return 1+ minDepth(root.right);
        }
        return 0;
    }
```
##### **15.左子叶之和**
```java
    public int sumOfLeftLeaves(TreeNode root) {
        return sumOfLeft(root, false);
    }
    public int sumOfLeft(TreeNode root, Boolean isLeft){
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null){
            return isLeft ? root.val : 0;
        }
        return sumOfLeft(root.left, true) + sumOfLeft(root.right, false);
    }
```

##### **16.树的坡度**

```java
    public int findTilt(TreeNode root) {
        if(root == null){
            return 0;
        }
        return tiltOfNode(root) + findTilt(root.left) + findTilt(root.right);
    }

    public int tiltOfNode(TreeNode root){
        if(root == null){
            return 0;
        }
        return Math.abs(sumOfRoot(root.left) - sumOfRoot(root.right));
    }

    public int sumOfRoot(TreeNode root){
        if(root == null){
            return 0;
        }
        if (root.left == null && root.right == null){
            return root.val;
        }
        return root.val + sumOfRoot(root.left) + sumOfRoot(root.right);
    }
```
