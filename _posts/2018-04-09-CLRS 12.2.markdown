---
layout: post
title:  "《CLRS》 Chap.12-2 Exercises"
date:   2018-04-09 23:50:59 +0800
categories: CLRS
---
##### **12.2-1 哪个不是查找过的序列?**
答：c 和 e。太简单。

##### **12.2-2 递归版 TREE-MINIMUM 和 TREE-MAXIMUM**
```java
  Node TREE_MINIMUM (Root){
    if(!Root){
      return Root;
    }
    TREE_MINIMUM(Root.left);
  }
  Node TREE_MAXIMUM (Root){
    if(!Root){
      return Root;
    }
    TREE_MAXIMUM(Root.right);
  }
```
##### **12.2-3 TREE-PREDECESSOR （ 查找任意节点前驱 ）**
情况一：该节点有左子树，则其前驱为左子树最右侧节点；
情况二：无左子树，前驱为向上追溯祖辈中第一个右子树包含待查节点的节点
```java
  Node TREE_PREDECESSOR (node){
    // 情况一
    if(node.left){
      p = node.left;
      while(p.right){
        p = p.right;
      }
      return p;
    }
    // 情况二
    while(node.parent.right != node){
      node = node.parent;
    }
    return node.parent;
  }

```
##### **12.2-4 B教授关于二叉树存在某一性质论断的反例**
答：略

##### **12.2-5 证明：如果二叉查找树中的某个结点有两个子女，则其后继没有左子女，其前驱没有右子女**
答：反证法，若其后继有左孩子，则存在一个大于该节点小于该节点后继的节点与后继的定义矛盾。前驱同理。
